package auction.optimisation.stage1;
import java.util.ArrayList;
import lpsolve.*;

public class Optimiser {

	void optimiseAllocation(ArrayList<Auction> Auctions, double budget){
		
		String constraint = "";
		String objectiveFunction = "";
		
		for (int i=0; i<Auctions.size(); i++){		//Iterate through the ArrayList of auctions generated by the scenario generator
			Auction auction = Auctions.get(i);
			
			//Create string variable to use in constraint of the form: x1 auction.sureBid + x2 auction.sureBid <= budget
			constraint = constraint+auction.sureBid+ " ";
			
			//Create string to use in objective function of the form: Max: x1 auction.utility + x2 auction.utility
			objectiveFunction = objectiveFunction + auction.utility+ " ";
		}
			
	    try {
	        // Create a problem with as many variables as there are auctions and 0 constraints
	        LpSolve solver = LpSolve.makeLp(0, Auctions.size());
	        
	        //Set amount of information provided by solver to only warnings and errors
	        solver.setVerbose(3);

	        // Set objective function
	        solver.strSetObjFn(objectiveFunction);
	        
	        //Set the solver to maximise the objective function
	        solver.setMaxim();
	        
	        //Add constraints
	        solver.strAddConstraint(constraint, LpSolve.LE, budget);
	        
	        //Set all variables to be binary (either buy or don't)
			for (int i=1; i<=Auctions.size(); i++){	
	        solver.setBinary(i, true);
			}

	        //Solve the problem
	        solver.solve();

		      //Print solution
	          double buyerUtility = solver.getObjective();
	          buyerUtility = (int)(buyerUtility*100);	
			  buyerUtility = buyerUtility/100;
		      System.out.println("Value of objective function (i.e. the amount of utility the bidder would gain): " + buyerUtility);
		      double[] coefficients = solver.getPtrVariables();
		      for (int i = 0; i < coefficients.length; i++) {
		        System.out.println("x"+(i+1)+" = " + coefficients[i]);
		      }

	        //Delete the problem and free memory
	        solver.deleteLp();
	      }
	      catch (LpSolveException e) {
	         e.printStackTrace();
	      }
	}
}
