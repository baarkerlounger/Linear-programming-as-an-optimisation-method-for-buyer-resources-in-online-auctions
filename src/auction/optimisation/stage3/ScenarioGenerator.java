package auction.optimisation.stage3;
import java.text.DecimalFormat;
import java.util.ArrayList;


public class ScenarioGenerator {
	
	private ArrayList<Auction> Auctions = new ArrayList<Auction>();
	private ArrayList<Bidder> Bidders = new ArrayList<Bidder>();
	private int numberOfAuctions = 20;
	private DecimalFormat decFor = new DecimalFormat("00.00");
	
	public ScenarioGenerator (int numberOfAuctions){this.numberOfAuctions = numberOfAuctions;}

	public void createItemAndAuction (){
		
		double minCurrentPrice = 0;
		double maxCurrentPrice = 100;
		
		//Create i items in associated auctions
		for (int i=1; i<=numberOfAuctions; i++){
			
			//Create item title/description
			int lengthOfNumberOfAuctions = String.valueOf(numberOfAuctions).length();
			String format = "";
			for(int j=0; j<lengthOfNumberOfAuctions; j++){format = format+"0";}
			DecimalFormat decFor1 = new DecimalFormat(format);
			String title = "item "+decFor1.format(i);
			String subTitle = "example subtitle "+i;
			String description = "example description "+i;
			
			//Start each auction at 0 with a minimum bidding increment of $10 for simplicity
			double currentPrice = 0;
			double minimumBiddingIncrement = 0.5;
	
			
			//Make each auction last 5 minutes for quick testing
			int duration = (int)(Math.random() * 50);
			
			//Generate a random rrp higher than the currentPrice price for the item (between 0 and $100)
			double rrp = currentPrice + (Math.random() * ((maxCurrentPrice - minCurrentPrice) + 1));  
			rrp = (int)(rrp*100);													
			rrp = rrp/100;
			
			double utility = rrp - currentPrice;
			utility = (int)(utility*100);	
			utility = utility/100;
			
			double utilityIfBidOn = utility - minimumBiddingIncrement;
		
			Item item = new Item(title, subTitle, description, rrp);	//Create instance of item
			Auction auction = new Auction(item, currentPrice, minimumBiddingIncrement, utility, utilityIfBidOn, duration, null);		//Create instance of an auction containing the item
			
			Auctions.add(auction);	//Add auctions to the ArrayList
		}
	}
		
		//Create Bidders
		public void createBidders (int numCautious, int numRiskNeutral, int numAggressive, double budget){
			
			for (int i=1; i<=numCautious; i++){
				
				//Create userNames
				String userName = "CautiousBidder "+i;
				
				Bidder bidder = new Cautious(userName, budget);
				Bidders.add(bidder);
			}
			
			for (int i=1; i<=numRiskNeutral; i++){
				
				//Create userNames
				String userName = "RiskNeutralBidder "+i;
				
				Bidder bidder = new RiskNeutral(userName, budget);
				Bidders.add(bidder);
			}
			
			for (int i=1; i<=numAggressive; i++){
				
				//Create userNames
				String userName = "AggressiveBidder "+i;
				
				Bidder bidder = new Aggressive(userName, budget);
				Bidders.add(bidder);
			}
		}
		
		public void printItemsUtility(){
			
			String highBidder;
			
			for (int i=0; i<Auctions.size(); i++){		//Iterate through the ArrayList of auctions generated by the scenario generator
				Auction auction = Auctions.get(i);
				if(auction.getHighBidder() == null){highBidder = " ";}
				else{highBidder = auction.getHighBidder().getUserName();}
				System.out.println(auction.getItem().getTitle()+" has a current high bid of $"+decFor.format(auction.getCurrentPrice())+" and an rrp of $"+decFor.format(auction.getItem().getRrp())+" giving it a buyer utility of $"+decFor.format(auction.getUtility())+". The high bidder is: "+highBidder);
			}
			System.out.println("\n");
		}
		
		public void passAuctionsToBidders(){
			
			for (int i=0; i<Bidders.size(); i++){		//Iterate through the ArrayList of bidders generated by the scenario generator
				Bidder bidder = Bidders.get(i);
				bidder.setAuctions(Auctions);
			}
		}
		
		public ArrayList<Auction> getAuctions(){
			return Auctions;
		}
		
		public ArrayList<Bidder> getBidders(){
			return Bidders;
		}
	
}
